# -*- coding: utf-8 -*-
"""Telegram-–±–æ—Ç –Ω–∞ aiogram –¥–ª—è –≤—ã–¥–∞—á–∏ —Ç–æ–ø–∞ —Ç—Ä–µ–Ω–¥–æ–≤."""
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from config.settings import BOT_TOKEN, TOP_N
from analytics.trend_engine import compute_top_terms, compute_velocity

bot = Bot(BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("üî• Trendwatch Bot –∑–∞–ø—É—â–µ–Ω. –ö–æ–º–∞–Ω–¥–∞ /top –ø–æ–∫–∞–∂–µ—Ç —Ç—Ä–µ–Ω–¥—ã.")

@dp.message(Command("top"))
async def top_cmd(message: types.Message):
    data = compute_top_terms(hours=1, top_n=TOP_N)
    if not data:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –°–ø–µ—Ä–≤–∞ –∑–∞–ø—É—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä: `python ingestion/fetch_messages.py`.")
        return
    lines = ["üî• –¢–æ–ø —Ç—Ä–µ–Ω–¥–æ–≤ –∑–∞ 1 —á–∞—Å:"]
    for i, (term, count) in enumerate(data, start=1):
        vel = compute_velocity(term, hours=1)
        lines.append(f"{i}. {term} ‚Äî {count} —É–ø–æ–º–∏–Ω., velocity={vel:+}")
    await message.answer("\n".join(lines))

def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN –ø—É—Å—Ç. –£–∫–∞–∂–∏ —Ç–æ–∫–µ–Ω –≤ .env")
    asyncio.run(dp.start_polling(bot))

if __name__ == "__main__":
    main()

    